#!/bin/bash

set -e

echo "Setting up Defender Automotive OS build environment..."

# Get the absolute path of the current directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Create build directory if it doesn't exist
if [ ! -d "${SCRIPT_DIR}/build" ]; then
    mkdir -p "${SCRIPT_DIR}/build"
fi

# Function to check if all required layers are available
check_layers() {
    echo "Checking for required layers..."

    declare -a REQUIRED_LAYERS=(
        "poky-source/meta"
        "poky-source/meta-poky"
        "poky-source/meta-yocto-bsp"
        "meta-openembedded/meta-oe"
        "meta-openembedded/meta-multimedia"
        "meta-openembedded/meta-networking"
        "meta-openembedded/meta-python"
        "meta-openembedded/meta-filesystems"
        "meta-qt6"
        "meta-clang"
        "meta-rust"
        "meta-browser"
        "meta-virtualization"
        "meta-raspberrypi"
        "meta-defender"
    )

    local missing=0
    for layer in "${REQUIRED_LAYERS[@]}"; do
        if [ ! -d "${SCRIPT_DIR}/${layer}" ]; then
            echo "ERROR: Missing layer: ${layer}"
            echo "Expected path: ${SCRIPT_DIR}/${layer}"
            missing=1
        fi
    done

    if [ $missing -eq 1 ]; then
        echo "Some required layers are missing. Please run ./setup.sh first."
        return 1
    fi

    echo "All required layers found."
    return 0
}

# Fix for meta-rust compatibility
update_rust_compatibility() {
    if [ -f "conf/bblayers.conf" ]; then
        # Check if meta-rust is compatible with the current version
        if grep -q "meta-rust" conf/bblayers.conf; then
            if [ -f "${SCRIPT_DIR}/meta-rust/conf/layer.conf" ]; then
                # Check if LAYERSERIES_COMPAT_rust-layer includes kirkstone
                if ! grep -q "LAYERSERIES_COMPAT_rust-layer.*kirkstone" "${SCRIPT_DIR}/meta-rust/conf/layer.conf"; then
                    echo "Updating meta-rust compatibility with kirkstone..."
                    if grep -q "LAYERSERIES_COMPAT_rust-layer" "${SCRIPT_DIR}/meta-rust/conf/layer.conf"; then
                        # Add kirkstone to compatible layers
                        sed -i 's/LAYERSERIES_COMPAT_rust-layer = "/LAYERSERIES_COMPAT_rust-layer = "kirkstone /g' "${SCRIPT_DIR}/meta-rust/conf/layer.conf"
                    fi
                fi
            fi
        fi
    fi
}

# Source the Yocto environment if poky-source exists
if [ -d "${SCRIPT_DIR}/poky-source" ]; then
    # First check if all required layers are available
    check_layers || exit 1

    # Backup existing config files if they exist
    if [ -f "${SCRIPT_DIR}/build/conf/bblayers.conf" ]; then
        cp "${SCRIPT_DIR}/build/conf/bblayers.conf" /tmp/bblayers.conf.save
    fi
    if [ -f "${SCRIPT_DIR}/build/conf/local.conf" ]; then
        cp "${SCRIPT_DIR}/build/conf/local.conf" /tmp/local.conf.save
    fi

    # Source Poky environment
    source "${SCRIPT_DIR}/poky-source/oe-init-build-env" "${SCRIPT_DIR}/build"

    # Restore configs if backups exist
    if [ -f "/tmp/bblayers.conf.save" ]; then
        cp /tmp/bblayers.conf.save conf/bblayers.conf
        echo "Restored custom bblayers.conf"
    elif [ -f "${SCRIPT_DIR}/conf/bblayers.conf" ]; then
        # Use the one generated by setup.sh if available
        cp "${SCRIPT_DIR}/conf/bblayers.conf" conf/
        echo "Copied bblayers.conf from setup.sh"
    fi

    if [ -f "/tmp/local.conf.save" ]; then
        cp /tmp/local.conf.save conf/local.conf
        echo "Restored custom local.conf"
    elif [ ! -f "conf/local.conf" ]; then
        # Create a default local.conf for Raspberry Pi
        cat > conf/local.conf << EOF
# Local configuration for Defender Automotive builds

MACHINE ?= "raspberrypi4"
DISTRO ?= "poky"
PACKAGE_CLASSES ?= "package_rpm"
EXTRA_IMAGE_FEATURES ?= "debug-tweaks"
USER_CLASSES ?= "buildstats"
PATCHRESOLVE = "noop"

# Use systemd as init system
DISTRO_FEATURES:append = " systemd wayland pam"
DISTRO_FEATURES:remove = "x11 sysvinit"
VIRTUAL-RUNTIME_init_manager = "systemd"
VIRTUAL-RUNTIME_initscripts = ""

# Use Qt6 for UI
PREFERRED_PROVIDER_virtual/libgl = "mesa"
PREFERRED_PROVIDER_virtual/egl = "mesa"

# Add Qt6 settings
PACKAGECONFIG:append:pn-qtbase = " gles2 eglfs fontconfig"

# Optimize build for Raspberry Pi
BB_NUMBER_THREADS ?= "4"
PARALLEL_MAKE ?= "-j 4"

# Download and cache locations
DL_DIR ?= "\${TOPDIR}/downloads"
SSTATE_DIR ?= "\${TOPDIR}/sstate-cache"

# Add automotive-specific packages
CORE_IMAGE_EXTRA_INSTALL += "defender-dashboard defender-carplay defender-launcher defender-settings"

# Enable debug features during development
EXTRA_IMAGE_FEATURES += "debug-tweaks ssh-server-openssh tools-debug tools-sdk"

# Enable network configuration
INHERIT += "extrausers"
EXTRA_USERS_PARAMS = "usermod -P defender root;"

# Reduce build tasks and disk usage
INHERIT += "rm_work"
BB_DISKMON_DIRS = ""

# Disable inotify for macOS builds
BB_INOTIFY_ENABLED = "0"
EOF
        echo "Created default local.conf for Raspberry Pi"
    fi

    # Update meta-rust for compatibility
    update_rust_compatibility

    # Verify the environment
    echo "Verifying build environment..."
    bitbake-layers show-layers || {
        echo "WARNING: There was an issue with the layers configuration."
        echo "Please check your bblayers.conf manually."
    }

    echo ""
    echo "Build environment configured."
    echo ""
    echo "To build the full image, run:"
    echo "  bitbake defender-automotive-image"
    echo ""
    echo "To build just the dashboard app, run:"
    echo "  bitbake defender-dashboard"
    echo ""
    echo "To run in QEMU (after building), run:"
    echo "  runqemu defender-automotive"
else
    echo "ERROR: poky-source directory not found at ${SCRIPT_DIR}/poky-source!"
    echo "Please run ./setup.sh first."
    exit 1
fi